version: '3.8'

services:
  # Application service - Node.js API
  api:
    build:
      context: .
      dockerfile: node-api.Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - PORT=3000
      - DATABASE_URL=postgresql://postgres:password@db:5432/devdb
    volumes:
      - ./api:/app
      - /app/node_modules
    depends_on:
      - db
    networks:
      - app-network

  # Frontend service - React
  frontend:
    build:
      context: .
      dockerfile: frontend.Dockerfile
    ports:
      - "8080:80"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - api
    networks:
      - app-network

  # Database service
  db:
    image: postgres:14-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_PASSWORD=password
      - POSTGRES_USER=postgres
      - POSTGRES_DB=devdb
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - app-network

  # Redis service
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - app-network

  # MongoDB service
  mongo:
    image: mongo:6
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password
    volumes:
      - mongo-data:/data/db
    networks:
      - app-network

  # Adminer - Database Management UI
  adminer:
    image: adminer:latest
    ports:
      - "8081:8080"
    depends_on:
      - db
      - mongo
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres-data: {}
  redis-data: {}
  mongo-data: {}